// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using mvp.tickets.data;

#nullable disable

namespace mvp.tickets.data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240121192812_Kafka")]
    partial class Kafka
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("mvp.tickets.data.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("#1976d2");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRoot")
                        .HasColumnType("boolean");

                    b.Property<string>("Logo")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Host")
                        .IsUnique();

                    b.HasIndex("IsRoot")
                        .IsUnique()
                        .HasFilter("\"IsRoot\" = true");

                    b.ToTable("Companies", "dbo");
                });

            modelBuilder.Entity("mvp.tickets.data.Models.File", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("Content")
                        .HasColumnType("bytea");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Files", "dbo");
                });

            modelBuilder.Entity("mvp.tickets.data.Models.Invite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTimeOffset>("DateSent")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Invites", "dbo");
                });

            modelBuilder.Entity("mvp.tickets.data.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AssigneeEmail")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int?>("AssigneeId")
                        .HasColumnType("integer");

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ReporterEmail")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasDefaultValue("");

                    b.Property<int>("ReporterId")
                        .HasColumnType("integer");

                    b.Property<int>("Source")
                        .HasColumnType("integer");

                    b.Property<int>("TicketCategoryId")
                        .HasColumnType("integer");

                    b.Property<int?>("TicketPriorityId")
                        .HasColumnType("integer");

                    b.Property<int>("TicketQueueId")
                        .HasColumnType("integer");

                    b.Property<int?>("TicketResolutionId")
                        .HasColumnType("integer");

                    b.Property<int>("TicketStatusId")
                        .HasColumnType("integer");

                    b.Property<string>("Token")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<Guid>("UniqueId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AssigneeId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ReporterId");

                    b.HasIndex("TicketCategoryId");

                    b.HasIndex("TicketPriorityId");

                    b.HasIndex("TicketQueueId");

                    b.HasIndex("TicketResolutionId");

                    b.HasIndex("TicketStatusId");

                    b.HasIndex("UniqueId")
                        .IsUnique();

                    b.ToTable("Tickets", "dbo");
                });

            modelBuilder.Entity("mvp.tickets.data.Models.TicketCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRoot")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.HasIndex("CompanyId", "IsDefault")
                        .IsUnique()
                        .HasFilter("\"IsDefault\" = true AND \"IsActive\" = true");

                    b.HasIndex("CompanyId", "Name")
                        .IsUnique();

                    b.ToTable("TicketCategories", "dbo");
                });

            modelBuilder.Entity("mvp.tickets.data.Models.TicketCategoryHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FromTicketCategoryId")
                        .HasColumnType("integer");

                    b.Property<int>("TicketId")
                        .HasColumnType("integer");

                    b.Property<int>("ToTicketCategoryId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FromTicketCategoryId");

                    b.HasIndex("TicketId");

                    b.HasIndex("ToTicketCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("TicketCategoryHistories", "dbo");
                });

            modelBuilder.Entity("mvp.tickets.data.Models.TicketComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatorId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInternal")
                        .HasColumnType("boolean");

                    b.Property<string>("Text")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("TicketId")
                        .HasColumnType("integer");

                    b.Property<Guid>("UniqueId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("TicketId");

                    b.HasIndex("UniqueId")
                        .IsUnique();

                    b.ToTable("TicketComments", "dbo");
                });

            modelBuilder.Entity("mvp.tickets.data.Models.TicketCommentAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TicketCommentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FileName")
                        .IsUnique();

                    b.HasIndex("TicketCommentId");

                    b.ToTable("TicketCommentAttachments", "dbo");
                });

            modelBuilder.Entity("mvp.tickets.data.Models.TicketHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsInternal")
                        .HasColumnType("boolean");

                    b.Property<string>("NewValue")
                        .HasColumnType("text");

                    b.Property<string>("OldValue")
                        .HasColumnType("text");

                    b.Property<int>("TicketId")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.HasIndex("UserId");

                    b.ToTable("TicketHistories", "dbo");
                });

            modelBuilder.Entity("mvp.tickets.data.Models.TicketObservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TicketId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.HasIndex("UserId");

                    b.ToTable("TicketObservation", "dbo");
                });

            modelBuilder.Entity("mvp.tickets.data.Models.TicketPriority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId", "Name")
                        .IsUnique();

                    b.ToTable("TicketPriorities", "dbo");
                });

            modelBuilder.Entity("mvp.tickets.data.Models.TicketPriorityHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("FromTicketPriorityId")
                        .HasColumnType("integer");

                    b.Property<int>("TicketId")
                        .HasColumnType("integer");

                    b.Property<int>("ToTicketPriorityId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FromTicketPriorityId");

                    b.HasIndex("TicketId");

                    b.HasIndex("ToTicketPriorityId");

                    b.HasIndex("UserId");

                    b.ToTable("TicketPriorityHistories", "dbo");
                });

            modelBuilder.Entity("mvp.tickets.data.Models.TicketQueue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId", "IsDefault")
                        .IsUnique()
                        .HasFilter("\"IsDefault\" = true AND \"IsActive\" = true");

                    b.HasIndex("CompanyId", "Name")
                        .IsUnique();

                    b.ToTable("TicketQueues", "dbo");
                });

            modelBuilder.Entity("mvp.tickets.data.Models.TicketQueueHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FromTicketQueueId")
                        .HasColumnType("integer");

                    b.Property<int>("TicketId")
                        .HasColumnType("integer");

                    b.Property<int>("ToTicketQueueId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FromTicketQueueId");

                    b.HasIndex("TicketId");

                    b.HasIndex("ToTicketQueueId");

                    b.HasIndex("UserId");

                    b.ToTable("TicketQueueHistories", "dbo");
                });

            modelBuilder.Entity("mvp.tickets.data.Models.TicketResolution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId", "Name")
                        .IsUnique();

                    b.ToTable("TicketResolutions", "dbo");
                });

            modelBuilder.Entity("mvp.tickets.data.Models.TicketResponseTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("TicketResponseTemplateTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TicketResponseTemplateTypeId", "Name")
                        .IsUnique();

                    b.ToTable("TicketResponseTemplates", "dbo");
                });

            modelBuilder.Entity("mvp.tickets.data.Models.TicketResponseTemplateType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId", "Name")
                        .IsUnique();

                    b.ToTable("TicketResponseTemplateTypes", "dbo");
                });

            modelBuilder.Entity("mvp.tickets.data.Models.TicketStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCompletion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId", "IsDefault")
                        .IsUnique()
                        .HasFilter("\"IsDefault\" = true AND \"IsActive\" = true");

                    b.HasIndex("CompanyId", "Name")
                        .IsUnique();

                    b.ToTable("TicketStatuses", "dbo");
                });

            modelBuilder.Entity("mvp.tickets.data.Models.TicketStatusHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FromTicketStatusId")
                        .HasColumnType("integer");

                    b.Property<int>("TicketId")
                        .HasColumnType("integer");

                    b.Property<int>("ToTicketStatusId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FromTicketStatusId");

                    b.HasIndex("TicketId");

                    b.HasIndex("ToTicketStatusId");

                    b.HasIndex("UserId");

                    b.ToTable("TicketStatusHistories", "dbo");
                });

            modelBuilder.Entity("mvp.tickets.data.Models.TicketStatusRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FromTicketStatusId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("ToTicketStatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ToTicketStatusId");

                    b.HasIndex("FromTicketStatusId", "ToTicketStatusId")
                        .IsUnique();

                    b.ToTable("TicketStatusRules", "dbo");
                });

            modelBuilder.Entity("mvp.tickets.data.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("Permissions")
                        .HasColumnType("integer");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId", "Email")
                        .IsUnique()
                        .HasFilter("\"Email\" IS NOT NULL");

                    b.HasIndex("CompanyId", "Phone")
                        .IsUnique()
                        .HasFilter("\"Phone\" IS NOT NULL");

                    b.ToTable("Users", "dbo");
                });

            modelBuilder.Entity("mvp.tickets.data.Models.Ticket", b =>
                {
                    b.HasOne("mvp.tickets.data.Models.User", "Assignee")
                        .WithMany("TicketAssignees")
                        .HasForeignKey("AssigneeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("mvp.tickets.data.Models.Company", "Company")
                        .WithMany("Tickets")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("mvp.tickets.data.Models.User", "Reporter")
                        .WithMany("TicketReporters")
                        .HasForeignKey("ReporterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("mvp.tickets.data.Models.TicketCategory", "TicketCategory")
                        .WithMany("Tickets")
                        .HasForeignKey("TicketCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("mvp.tickets.data.Models.TicketPriority", "TicketPriority")
                        .WithMany("Tickets")
                        .HasForeignKey("TicketPriorityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("mvp.tickets.data.Models.TicketQueue", "TicketQueue")
                        .WithMany("Tickets")
                        .HasForeignKey("TicketQueueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("mvp.tickets.data.Models.TicketResolution", "TicketResolution")
                        .WithMany("Tickets")
                        .HasForeignKey("TicketResolutionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("mvp.tickets.data.Models.TicketStatus", "TicketStatus")
                        .WithMany("Tickets")
                        .HasForeignKey("TicketStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Assignee");

                    b.Navigation("Company");

                    b.Navigation("Reporter");

                    b.Navigation("TicketCategory");

                    b.Navigation("TicketPriority");

                    b.Navigation("TicketQueue");

                    b.Navigation("TicketResolution");

                    b.Navigation("TicketStatus");
                });

            modelBuilder.Entity("mvp.tickets.data.Models.TicketCategory", b =>
                {
                    b.HasOne("mvp.tickets.data.Models.Company", "Company")
                        .WithMany("TicketCategories")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("mvp.tickets.data.Models.TicketCategory", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Company");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("mvp.tickets.data.Models.TicketCategoryHistory", b =>
                {
                    b.HasOne("mvp.tickets.data.Models.TicketCategory", "FromTicketCategory")
                        .WithMany("FromTicketCategoryHistories")
                        .HasForeignKey("FromTicketCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("mvp.tickets.data.Models.Ticket", "Ticket")
                        .WithMany("TicketCategoryHistories")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("mvp.tickets.data.Models.TicketCategory", "ToTicketCategory")
                        .WithMany("ToTicketCategoryHistories")
                        .HasForeignKey("ToTicketCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("mvp.tickets.data.Models.User", "User")
                        .WithMany("TicketCategoryHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("FromTicketCategory");

                    b.Navigation("Ticket");

                    b.Navigation("ToTicketCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("mvp.tickets.data.Models.TicketComment", b =>
                {
                    b.HasOne("mvp.tickets.data.Models.User", "Creator")
                        .WithMany("TicketComments")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("mvp.tickets.data.Models.Ticket", "Ticket")
                        .WithMany("TicketComments")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("mvp.tickets.data.Models.TicketCommentAttachment", b =>
                {
                    b.HasOne("mvp.tickets.data.Models.TicketComment", "TicketComment")
                        .WithMany("TicketCommentAttachments")
                        .HasForeignKey("TicketCommentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TicketComment");
                });

            modelBuilder.Entity("mvp.tickets.data.Models.TicketHistory", b =>
                {
                    b.HasOne("mvp.tickets.data.Models.Ticket", "Ticket")
                        .WithMany("TicketHistories")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("mvp.tickets.data.Models.User", "User")
                        .WithMany("TicketHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Ticket");

                    b.Navigation("User");
                });

            modelBuilder.Entity("mvp.tickets.data.Models.TicketObservation", b =>
                {
                    b.HasOne("mvp.tickets.data.Models.Ticket", "Ticket")
                        .WithMany("TicketObservations")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("mvp.tickets.data.Models.User", "User")
                        .WithMany("TicketObservations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ticket");

                    b.Navigation("User");
                });

            modelBuilder.Entity("mvp.tickets.data.Models.TicketPriority", b =>
                {
                    b.HasOne("mvp.tickets.data.Models.Company", "Company")
                        .WithMany("TicketPriorities")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("mvp.tickets.data.Models.TicketPriorityHistory", b =>
                {
                    b.HasOne("mvp.tickets.data.Models.TicketPriority", "FromTicketPriority")
                        .WithMany("FromTicketPriorityHistories")
                        .HasForeignKey("FromTicketPriorityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("mvp.tickets.data.Models.Ticket", "Ticket")
                        .WithMany("TicketPriorityHistories")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("mvp.tickets.data.Models.TicketPriority", "ToTicketPriority")
                        .WithMany("ToTicketPriorityHistories")
                        .HasForeignKey("ToTicketPriorityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("mvp.tickets.data.Models.User", "User")
                        .WithMany("TicketPriorityHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("FromTicketPriority");

                    b.Navigation("Ticket");

                    b.Navigation("ToTicketPriority");

                    b.Navigation("User");
                });

            modelBuilder.Entity("mvp.tickets.data.Models.TicketQueue", b =>
                {
                    b.HasOne("mvp.tickets.data.Models.Company", "Company")
                        .WithMany("TicketQueues")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("mvp.tickets.data.Models.TicketQueueHistory", b =>
                {
                    b.HasOne("mvp.tickets.data.Models.TicketQueue", "FromTicketQueue")
                        .WithMany("FromTicketQueueHistories")
                        .HasForeignKey("FromTicketQueueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("mvp.tickets.data.Models.Ticket", "Ticket")
                        .WithMany("TicketQueueHistories")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("mvp.tickets.data.Models.TicketQueue", "ToTicketQueue")
                        .WithMany("ToTicketQueueHistories")
                        .HasForeignKey("ToTicketQueueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("mvp.tickets.data.Models.User", "User")
                        .WithMany("TicketQueueHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("FromTicketQueue");

                    b.Navigation("Ticket");

                    b.Navigation("ToTicketQueue");

                    b.Navigation("User");
                });

            modelBuilder.Entity("mvp.tickets.data.Models.TicketResolution", b =>
                {
                    b.HasOne("mvp.tickets.data.Models.Company", "Company")
                        .WithMany("TicketResolutions")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("mvp.tickets.data.Models.TicketResponseTemplate", b =>
                {
                    b.HasOne("mvp.tickets.data.Models.TicketResponseTemplateType", "TicketResponseTemplateType")
                        .WithMany("TicketResponseTemplates")
                        .HasForeignKey("TicketResponseTemplateTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TicketResponseTemplateType");
                });

            modelBuilder.Entity("mvp.tickets.data.Models.TicketResponseTemplateType", b =>
                {
                    b.HasOne("mvp.tickets.data.Models.Company", "Company")
                        .WithMany("TicketResponseTemplateTypes")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("mvp.tickets.data.Models.TicketStatus", b =>
                {
                    b.HasOne("mvp.tickets.data.Models.Company", "Company")
                        .WithMany("TicketStatuses")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("mvp.tickets.data.Models.TicketStatusHistory", b =>
                {
                    b.HasOne("mvp.tickets.data.Models.TicketStatus", "FromTicketStatus")
                        .WithMany("FromTicketStatusHistories")
                        .HasForeignKey("FromTicketStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("mvp.tickets.data.Models.Ticket", "Ticket")
                        .WithMany("TicketStatusHistories")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("mvp.tickets.data.Models.TicketStatus", "ToTicketStatus")
                        .WithMany("ToTicketStatusHistories")
                        .HasForeignKey("ToTicketStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("mvp.tickets.data.Models.User", "User")
                        .WithMany("TicketStatusHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("FromTicketStatus");

                    b.Navigation("Ticket");

                    b.Navigation("ToTicketStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("mvp.tickets.data.Models.TicketStatusRule", b =>
                {
                    b.HasOne("mvp.tickets.data.Models.TicketStatus", "FromTicketStatus")
                        .WithMany("TicketFromStatusRules")
                        .HasForeignKey("FromTicketStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("mvp.tickets.data.Models.TicketStatus", "ToTicketStatus")
                        .WithMany("TicketToStatusRules")
                        .HasForeignKey("ToTicketStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FromTicketStatus");

                    b.Navigation("ToTicketStatus");
                });

            modelBuilder.Entity("mvp.tickets.data.Models.User", b =>
                {
                    b.HasOne("mvp.tickets.data.Models.Company", "Company")
                        .WithMany("Users")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("mvp.tickets.data.Models.Company", b =>
                {
                    b.Navigation("TicketCategories");

                    b.Navigation("TicketPriorities");

                    b.Navigation("TicketQueues");

                    b.Navigation("TicketResolutions");

                    b.Navigation("TicketResponseTemplateTypes");

                    b.Navigation("TicketStatuses");

                    b.Navigation("Tickets");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("mvp.tickets.data.Models.Ticket", b =>
                {
                    b.Navigation("TicketCategoryHistories");

                    b.Navigation("TicketComments");

                    b.Navigation("TicketHistories");

                    b.Navigation("TicketObservations");

                    b.Navigation("TicketPriorityHistories");

                    b.Navigation("TicketQueueHistories");

                    b.Navigation("TicketStatusHistories");
                });

            modelBuilder.Entity("mvp.tickets.data.Models.TicketCategory", b =>
                {
                    b.Navigation("FromTicketCategoryHistories");

                    b.Navigation("SubCategories");

                    b.Navigation("Tickets");

                    b.Navigation("ToTicketCategoryHistories");
                });

            modelBuilder.Entity("mvp.tickets.data.Models.TicketComment", b =>
                {
                    b.Navigation("TicketCommentAttachments");
                });

            modelBuilder.Entity("mvp.tickets.data.Models.TicketPriority", b =>
                {
                    b.Navigation("FromTicketPriorityHistories");

                    b.Navigation("Tickets");

                    b.Navigation("ToTicketPriorityHistories");
                });

            modelBuilder.Entity("mvp.tickets.data.Models.TicketQueue", b =>
                {
                    b.Navigation("FromTicketQueueHistories");

                    b.Navigation("Tickets");

                    b.Navigation("ToTicketQueueHistories");
                });

            modelBuilder.Entity("mvp.tickets.data.Models.TicketResolution", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("mvp.tickets.data.Models.TicketResponseTemplateType", b =>
                {
                    b.Navigation("TicketResponseTemplates");
                });

            modelBuilder.Entity("mvp.tickets.data.Models.TicketStatus", b =>
                {
                    b.Navigation("FromTicketStatusHistories");

                    b.Navigation("TicketFromStatusRules");

                    b.Navigation("TicketToStatusRules");

                    b.Navigation("Tickets");

                    b.Navigation("ToTicketStatusHistories");
                });

            modelBuilder.Entity("mvp.tickets.data.Models.User", b =>
                {
                    b.Navigation("TicketAssignees");

                    b.Navigation("TicketCategoryHistories");

                    b.Navigation("TicketComments");

                    b.Navigation("TicketHistories");

                    b.Navigation("TicketObservations");

                    b.Navigation("TicketPriorityHistories");

                    b.Navigation("TicketQueueHistories");

                    b.Navigation("TicketReporters");

                    b.Navigation("TicketStatusHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
